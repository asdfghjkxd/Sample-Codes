@startuml
start
fork
:Runs on Ubuntu-latest;
:Checkout Repository;
:Set up Python 3.12;
:Install Dependencies;
:Execute Tests;

if (Tests executed without exceptions) then (yes)
    :Upload Code Coverage report;
else (no)
    stop
endif

fork again
:Runs on Windows-latest;
:Checkout Repository;
:Set up Python 3.12;
:Install Dependencies;
:Execute Tests;

if (Tests executed without exceptions) then (yes)
    :Upload Code Coverage report;
else (no)
    stop
endif

fork again
:Runs on macOS-latest;
:Checkout Repository;
:Set up Python 3.12;
:Install Dependencies;
:Execute Tests;

if (Tests executed without exceptions) then (yes)
    :Upload Code Coverage report;
else (no)
    stop
endif

endfork

:Begin Terrascan;
:Runs on Ubuntu-latest;
:Clone Repository and Install Terraform;
:Execute Terrascan;
:Upload Security Report to GitHub;

if (Environment?) then (Production)
    :Begin process for setting up Terraform Production backend;
    :Runs on Ubuntu-latest;
    :Clone Repository and Execute Terraform Scripts;

    :Begin process for setting up Production ECR Repository;
    :Runs on Ubuntu-latest;
    :Clone Repository and Execute Terraform Scripts;

    if (Approval from reviewers?) then (yes)
        :Begin process for setting up main infrastructure on Production;
        :Runs on Ubuntu-latest;
        :Clone Repository and Execute Terraform Scripts;
    else (no)
        stop
    endif
else (Dev)
    :Begin process for setting up Terraform Dev backend;
    :Runs on Ubuntu-latest;
    :Clone Repository and Execute Terraform Scripts;

    :Begin process for setting up Dev ECR Repository;
    :Runs on Ubuntu-latest;
    :Clone Repository and Execute Terraform Scripts;

    if (Approval from reviewers?) then (yes)
        :Begin process for setting up main infrastructure on Dev;
        :Runs on Ubuntu-latest;
        :Clone Repository and Execute Terraform Scripts;
    else (no)
        stop
    endif
endif
stop
@enduml