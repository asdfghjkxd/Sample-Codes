# This workflow is used to create the necessary
# cloud infrastructure first.
# You should only run this once to get your cloud infrastructure up
# and running. Running it multiple times may create duplicate resources.
name: Create Basic Cloud Infrastructure

on: [push, pull_request]
#on:
#  workflow_dispatch:

env:
  BOTO3_DEPENDENCY: "1.34.139"
  PYTHON_VERSION: "3.12"
  ECR_REPO_NAME: "ssg-sample-application"
  AWS_REGION: "ap-southeast-1"
  ECS_CONTAINER_NAME: "app"   # should be the same as containerDefinitions of task definition file
  ECS_CLUSTER_ARN: "arn:aws:ecs:ap-southeast-1:730335480348:cluster/ssg-ecs-app"
  SG_GROUP_NAME: "ssg-wsg-sg"

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Create Basic Cloud Infrastructure

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./SSG-API-Testing-Application-v2/deploy
        run: pip install boto3==${{ env.BOTO3_DEPENDENCY }}

      - name: Build Base Cloud Infrastructure
        working-directory: ./SSG-API-Testing-Application-v2/deploy
        run: python infrastructure.py
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Configure AWS Credentials
        id: configure-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create and Push Docker Image
        id: create-and-push-docker-image
        working-directory: SSG-API-Testing-Application-v2/app
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up ECS Cluster
        working-directory: ./SSG-API-Testing-Application-v2/deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ECS_CLUSTER_ARB: ${{ env.ECS_CLUSTER_ARN }}
          ECS_IMAGE: ${{ steps.create-and-push-docker-image.outputs.image }}
          SUBNET1_ID: "subnet-0bec82cb68a0d38fb"
          SUBNET2_ID: "subnet-04c6ebc504ec9d961"
          SECURITY_GROUP_ID: "sg-098e1a2e7a382c8b6"
          ECS_CLUSTER_ARN: "arn:aws:ecs:ap-southeast-1:730335480348:cluster/ssg-ecs-app"
          ECS_SERVICE_NAME: "ssg-ecs-service"
        run: |
          python ecs.py
