# Workflow references https://stackoverflow.com/questions/59166099/github-action-aws-cli,
# https://stackoverflow.com/questions/51028677/create-aws-ecr-repository-if-it-doesnt-exist,
# https://github.com/aws-actions/amazon-ecr-login and
# https://medium.com/@octavio/ecs-deployments-with-github-actions-dd34beed6528
# https://stackoverflow.com/questions/75546117/github-action-how-to-edit-a-json-objects-with-github-repository-secrets

name: Run Tests and Deploy to AWS

on:
  pull_request:
#  pull_request_review:
#    types:
#      - submitted
  push:

env:
  TF_CLOUD_ORGANIZATION: "ssg-wsg"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ""
  TF_BUCKET_NAME: "ssg-tf-bucket"

jobs:
#  test:
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, windows-latest, macOS-latest ]
#    name: Test on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          cache: "pip"
#
#      - name: Install dependencies
#        working-directory: ./SSG-API-Testing-Application-v2/app
#        run: pip install -r requirements.txt
#
#      - name: Run tests
#        working-directory: ./SSG-API-Testing-Application-v2/app
#        run: python test_runner.py
#
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v4.0.1
#        with:
#          files: ./SSG-API-Testing-Application-v2/coverage.xml
#          token: ${{ secrets.CODECOV_TOKEN }}
#          fail_ci_if_error: false

  setup:
    needs:
#      - test
    runs-on: ubuntu-latest
    name: Setup Terraform Backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Verify Terraform Script
        id: create-backend-verify
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        run: terraform fmt -check

      - name: Validate Terraform Script
        id: create-backend-validate
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        run: terraform validate

      - name: Initialise Backend
        id: init-backend
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        run: terraform init

      - name: View Backend Plan
        id: plan-backend
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        run: terraform plan

      - name: Apply Terraform Plan
        id: apply-backend
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        run: terraform apply -auto-approve

  verify:
    needs:
      - setup
    runs-on: ubuntu-latest
    name: Verify Terraform Scripts

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Verify Terraform Script [Create Backend]
        id: create-backend-verify
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        run: terraform fmt -check

      - name: Verify Terraform Script [Create ECR Repository]
        id: create-ecr-verify
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-ecr
        run: terraform fmt -check

      - name: Verify Terraform Script [Main Infrastructure]
        id: create-main-verify
        working-directory: ./SSG-API-Testing-Application-v2/deploy/main-infrastructure
        run: terraform fmt -check

      - name: Plan for Backend Infrastructure
        if: ${{ steps.create-backend-verify.outcome == 'success' }}
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init && terraform plan

      - name: Plan for ECR Repository
        if: ${{ steps.create-ecr-verify.outcome == 'success' }}
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init && terraform plan

      - name: Plan for Main Infrastructure Setup and Deployment
        if: ${{ steps.create-main-verify.outcome == 'success' }}
        working-directory: ./SSG-API-Testing-Application-v2/deploy/main-infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init && terraform plan

  # Deploy to AWS only if the PR is approved
  deploy:
    needs:
      - test
      - verify
#    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    name: Create Docker Image and Deploy to ECR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up S3 Bucket for Terraform State
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init && terraform apply -auto-approve

      - name: Create ECR Repository
        working-directory: ./SSG-API-Testing-Application-v2/deploy/create-ecr
        id: ecr-url
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            TF_VAR_ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
        run: |
          terraform init && terraform apply -auto-approve
          APP_URL=$(fromJson(terraform output -json).app_url.value)
          echo "app_url=$APP_URL > $GITHUB_OUTPUT 

      - name: Configure AWS Credentials
        id: configure-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create and Push Docker Image to ECR
        id: create-and-push-docker-image
        working-directory: SSG-API-Testing-Application-v2/app
        env:
          REGISTRY_REPOSITORY: ${{ steps.ecr-url.outputs.app_url }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY_REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create Main Infrastructure
        id: main-infra
        working-directory: ./SSG-API-Testing-Application-v2/deploy/main-infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ECR_REPO_URL: ${{ steps.ecr-url.outputs.app_url }}
          TF_VAR_IMAGE_TAG: ${{ github.sha }}
        run: terraform init && terraform apply -auto-approve
